---
import type { TabType } from "~/i18n/translation-checkers";
import { removeLeadingSlash, removeTrailingSlash } from "~/util";
import { getNav } from "~/util/getNav";
import { getPageCategory } from "~/util/getPageCategory";
import SidebarContent from "./SidebarContent.astro";

export interface Props {
  currentPage: string;
}

const { currentPage } = Astro.props;
const currentPageMatch = removeLeadingSlash(removeTrailingSlash(currentPage));

const sidebarSections = (await getNav(Astro)).reduce((collection, item) => {
  if ("header" in item) collection.push({ ...item, children: [] });
  else collection[collection.length - 1].children.push(item);

  return collection;
}, [] as Parameters<typeof SidebarContent>[0]["sidebarSections"]);

const learnSections = sidebarSections.filter(
  (section) => section.type === "learn"
);
const apiSections = sidebarSections.filter((section) => section.type === "api");

let activeTab: TabType = "learn";

const isReference = ["Error Reference", "Reference"].includes(
  getPageCategory({ pathname: currentPage })
);

if (isReference) {
  activeTab = "api";
} else {
  const base = currentPageMatch.split("/").slice(1, 3).join("/");
  for (const section of sidebarSections) {
    if (section.children.some((item) => item.slug === base))
      activeTab = section.type;
  }
}
---

<!-- TODO: complete aria-label with i18n -->
<nav class="w-full h-full text-sm">
  <ul
    class="pt-4 max-h-full overflow-x-visible overflow-y-auto md:fixed md:top-[calc(var(--theme-navbar-height)+3em)] md:bottom-0 md:w-[calc(var(--theme-left-sidebar-width)-var(--min-spacing-inline)*1.6)]"
  >
    <SidebarContent
      type={"learn"}
      defaultActiveTab={activeTab}
      sidebarSections={learnSections}
      currentPageMatch={currentPageMatch}
    />
    <SidebarContent
      type={"api"}
      defaultActiveTab={activeTab}
      sidebarSections={apiSections}
      currentPageMatch={currentPageMatch}
    />
  </ul>
</nav>
