---
import DarkThemeIcon from "./DarkThemeIcon.astro";
import LightThemeIcon from "./LightThemeIcon.astro";

export interface Props {
  isInsideHeader?: boolean;
}

const { isInsideHeader } = Astro.props;

export type Theme = "light" | "dark";

const themes: Theme[] = ["light", "dark"];
---

<div
  class={`items-center gap- py-1 px-2 mt-8 rounded-full bg-[var(--theme-code-inline-bg)] outline-none md:mt-0 ${
    isInsideHeader ? "hidden md:inline-flex" : "inline-flex md:hidden"
  }`}
>
  {
    themes.map((theme, index) => {
      const icons = [<LightThemeIcon />, <DarkThemeIcon />];

      return (
        <label
          id={`theme-label-${theme}`}
          class="focus-within:outline-none focus-within:shadow-[0_0_0_0.08rem_var(--theme-accent),_0_0_0_0.12rem_white] text-[color:var(--theme-code-inline-text)] relative flex items-center justify-center opacity-50 cursor-pointer"
        >
          {icons[index]}

          <input
            class="absolute opacity-0 top-0 right-0 left-0 bottom-0 -z-[1]"
            id={`theme-toggle-${theme}`}
            type="radio"
            name="theme-toggle"
          />
        </label>
      );
    })
  }
</div>

<style>
  label.checked {
    @apply text-[color:var(--theme-accent)] opacity-100;
  }
</style>

<script>
  import type { Theme } from "./ThemeToggleButton.astro";

  const getDefaultTheme = (): Theme => {
    if (
      localStorage.theme === "dark" ||
      (!("theme" in localStorage) &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    )
      return "dark";

    return "light";
  };

  const themes: Theme[] = ["light", "dark"];

  const toggles = {
    light: document.getElementById("theme-toggle-light"),
    dark: document.getElementById("theme-toggle-dark"),
  };

  const labels = {
    light: document.getElementById("theme-label-light"),
    dark: document.getElementById("theme-label-dark"),
  };

  let currentTheme = getDefaultTheme();
  labels[currentTheme]?.classList.add("checked");

  themes.forEach((theme) => {
    toggles[theme]?.addEventListener("click", () => {
      if (currentTheme === theme) return;

      currentTheme = theme;
      localStorage.theme = theme;
      themes.forEach((theme) => labels[theme]?.classList.toggle("checked"));
    });
  });
</script>
